name: CI/CD

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  workflow_dispatch: {}

jobs:
  deploy_dev:
    runs-on: [self-hosted, pc, dev]
    defaults: { run: { shell: cmd } }
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: "20"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --omit=dev

      - name: Create PM2 directory
        run: |
          if not exist "%GITHUB_WORKSPACE%\.pm2" mkdir "%GITHUB_WORKSPACE%\.pm2"

      - name: PM2 deploy (dev)
        run: |
          cd /d "%GITHUB_WORKSPACE%"
          set "PM2_HOME=%GITHUB_WORKSPACE%\.pm2"
          
          npx --yes pm2 delete ecosystem.config.js || echo "App not running, starting fresh"
          npx --yes pm2 start ecosystem.config.js --env development
          npx --yes pm2 save
          
          # إعداد بدء تلقائي للويندوز
          npx --yes pm2 startup windows -n | findstr /C:"pm2" > startup.bat || echo "Startup command not found"
          if exist startup.bat (
            call startup.bat
            del startup.bat
          )

      - name: Wait for app to start
        run: |
          echo Waiting for application to start...
          ping -n 10 127.0.0.1 >nul

      - name: PM2 debug (dev)
        run: |
          set "PM2_HOME=%GITHUB_WORKSPACE%\.pm2"
          echo ===== PM2 List =====
          npx --yes pm2 list
          echo ===== PM2 Describe =====
          npx --yes pm2 describe demo-ci || echo "Cannot describe app"
          echo ===== PM2 Logs =====
          npx --yes pm2 logs demo-ci --lines 10 || echo "Cannot show logs"

      - name: Check listening ports
        run: |
          echo ===== Netstat Output =====
          netstat -an | findstr ":3000" || echo "Port 3000 not found in listening state"
          echo ===== Process List =====
          tasklist | findstr "node" || echo "No node processes found"

      - name: Health check (dev)
        run: |
          echo ===== Health Check =====
          curl -sSf http://localhost:3000/hello && echo "Health check passed for /hello" || echo "Health check failed for /hello"
          curl -sSf http://localhost:3000/bye && echo "Health check passed for /bye" || echo "Health check failed for /bye"

  deploy_prod:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [self-hosted, lab, prod]
    environment: { name: production }
    defaults: { run: { shell: cmd } }
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: "20"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --omit=dev

      - name: Create PM2 directory
        run: |
          if not exist "%GITHUB_WORKSPACE%\.pm2" mkdir "%GITHUB_WORKSPACE%\.pm2"

      - name: PM2 deploy (prod)
        run: |
          cd /d "%GITHUB_WORKSPACE%"
          set "PM2_HOME=%GITHUB_WORKSPACE%\.pm2"
          
          npx --yes pm2 delete demo-ci || echo "App not running, starting fresh"
          npx --yes pm2 start ecosystem.config.js --env production
          npx --yes pm2 save
          
          npx --yes pm2 startup windows -n | findstr /C:"pm2" > startup.bat || echo "Startup command not found"
          if exist startup.bat (
            call startup.bat
            del startup.bat
          )

      - name: Wait for app to start
        run: |
          echo Waiting for application to start...
          ping -n 10 127.0.0.1 >nul

      - name: PM2 debug (prod)
        run: |
          set "PM2_HOME=%GITHUB_WORKSPACE%\.pm2"
          echo ===== PM2 List =====
          npx --yes pm2 list
          echo ===== PM2 Describe =====
          npx --yes pm2 describe demo-ci || echo "Cannot describe app"
          echo ===== PM2 Logs =====
          npx --yes pm2 logs demo-ci --lines 10 || echo "Cannot show logs"

      - name: Health check (prod)
        run: |
          echo ===== Health Check =====
          curl -sSf http://localhost:3000/hello && echo "Health check passed for /hello" || echo "Health check failed for /hello"
          curl -sSf http://localhost:3000/bye && echo "Health check passed for /bye" || echo "Health check failed for /bye"